<<<<<<< Updated upstream
#!/usr/bin/bash
# Author Gaurav
# Universitat Potsdam
# Date 2024-6-6
=======
import { Textinput, PopupWindow, Button } from "std-windgets.slint" {
    
}  


OUTPUT=$(slint-viewer - --save-data - << EOF
import { StandardButton, GridBox, LineEdit } from "std-widgets.slint";
_ := Dialog {
    property name <=> name-le.text;
    property address <=> address-le.text;
    StandardButton { kind: ok; }
    StandardButton { kind: cancel; }
    preferred-width: 300px;
    GridBox {
        Row {
            Text { text: "Enter your name:"; }
            name-le := LineEdit { }
        }
        Row {
            Text { text: "Address:"; }
            address-le := LineEdit { }
        }
    }
}
EOF
)
NAME=$(jq -r ".name" <<< "$OUTPUT")
ADDRESS=$(jq -r ".address" <<< "$OUTPUT")

echo "Your name is $NAME and you live in $ADDRESS!"



#!/bin/bash -e
# Copyright Â© SixtyFPS GmbH <info@slint.dev>
# SPDX-License-Identifier: MIT

if command lsb_release 2>/dev/null >/dev/null; then
   os_name=`lsb_release -ds | tr -d '"\\\\'`
else
   os_name="(unable to determine Linux distribution)"
fi

uptime=`uptime -p | cut -d " " -f2-` | tr -d '"\\\\'
cpu_count=`grep processor /proc/cpuinfo | wc -l`
cpu_vendor=`awk -F ": " '/vendor_id/{ print $2; exit}' < /proc/cpuinfo | tr -d '"\\\\'`
cpu_model=`awk -F ": " '/model name/{ print $2; exit}' < /proc/cpuinfo | tr -d '"\\\\'`
mem_size_kb=`sed -n -e "s,MemTotal:\s\+\(.*\)\s\+.\+,\1,p"< /proc/meminfo`
partitions=`df -T --block-size=1 | tail -n+2 | awk 'NR > 1 { printf(", ") } {printf "{ \"dev\": \"%s\", \"mnt\": \"%s\", \"total\": %s, \"free\": %s }", $1,$7, $3, $5}'`
buffer_mem_size_kb=`sed -n -e "s,Buffers:\s\+\(.*\)\s\+.\+,\1,p"< /proc/meminfo`
swap_total_kb=`sed -n -e "s,SwapTotal:\s\+\(.*\)\s\+.\+,\1,p"< /proc/meminfo`
swap_free_kb=`sed -n -e "s,SwapFree:\s\+\(.*\)\s\+.\+,\1,p"< /proc/meminfo`
swap_used_kb=$((swap_total_kb - swap_free_kb))

slint-viewer `dirname $0`/sysinfo.slint --load-data - <<EOT
{
    "os_name": "$os_name",
    "uptime": "$uptime",
    "cpu_count": "$cpu_count",
    "cpu_vendor": "$cpu_vendor",
    "cpu_model": "$cpu_model",
    "mem_size_kb": $mem_size_kb,
    "buffer_mem_size_kb": $buffer_mem_size_kb,
    "swap_total_kb": $swap_total_kb,
    "swap_used_kb": $swap_used_kb,
    "swap_free_kb": $swap_free_kb,
    "partitions": [ $partitions ]
}
EOT



>>>>>>> Stashed changes
# A way to connect to the conda and search for the terms and get the conda generators.
term=$(slint-viewer - --save-data - << EOF
import { StandardButton, GridBox, LineEdit } from "std-widgets.slint";
component UserDataDialog inherits Dialog {
    property name <=> name-le.condasearch;
    StandardButton { kind: ok; }
    StandardButton { kind: cancel; }
    preferred-width: 300px;
    GridBox {
        Row {
            Text { text: "Enter your conda search:"; }
            name-le := LineEdit { }
        }
        }
    }
}
EOF
)
wget -F "https://anaconda.org/search?q=${term}" -O condasearch.txt
echo "all term fetched"
cat condasearch.txt | grep ${term} | \
         grep href | cut -f 2 -d "=" \
              | cut -f 1 -d ">" | grep -w ${term} > saveintermediate.txt
echo "all intermediate generated"
for i in $(cat saveintermediate.txt); do echo \
        "https@//anaconda.org$i"; done | \
                     sed "s/\"//g" | sed "s/@/:/g" > downloadlinks.txt
echo "moving into intermediate"
mkdir intermediate
cp -r downloadlinks.txt ./intermediate
cd intermediate
cat downloadlinks.txt | while read line; \
          do wget -F ${line}; done
cat * | grep -w install | grep ${term} > newsave.txt
cat newsave.txt | grep code | cut -f 2 -d ">" | cut -f 1 -d "<"
cd ..
rm -rf intermediate
rm -rf saveintermediate.txt finaltext.txt downloadlinks.txt condasearch.txt
